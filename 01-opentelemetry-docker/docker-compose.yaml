services:

# Zookeeper
  zookeeper:
    image: docker.io/confluentinc/cp-zookeeper:latest
    container_name: confluent-kafka_zookeeper
    ports:
      - "2181:2181"
    env_file:
      - ./values.env
    restart: unless-stopped
    networks:
      - otel-demo

# Kafka
  kafka:
    image: docker.io/confluentinc/cp-kafka:latest
    container_name: confluent-kafka_broker
    depends_on:
      - zookeeper
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    env_file:
      - ./values.env
    networks:
      - otel-demo

# Kafdrop
  kafdrop:
    image: docker.io/obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    env_file:
      - ./values.env
    depends_on:
      - "zookeeper"
      - "kafka"
    networks:
      - otel-demo

# Postgresql
  postgres:
    image: docker.io/library/postgres:16
    container_name: demo-postgres
    restart: always
    ports:
      - "5433:5432"
    env_file:
      - ./values.env
    volumes:
      - demo-postgres-data:/var/lib/postgresql/data
    networks:
      - otel-demo


# Jaeger
  jaeger:
    image: docker.io/jaegertracing/all-in-one
    container_name: jaeger
    restart: unless-stopped
    env_file:
      - ./values.env
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "14268:14268"
      - "14250:14250"
      - "16686:16686"
    networks:
      - otel-demo

# Prometheus
  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus-configs/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus
    networks:
      - otel-demo

# Grafana
  grafana:
    image: docker.io/grafana/grafana-enterprise:latest
    container_name: grafana
    restart: unless-stopped
    env_file:
      - ./values.env
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - otel-demo

# Opentelemetry
  otelcol:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.106.1
    container_name: otel-collector
    restart: unless-stopped
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8888:8888" # Prometheus metrics
      - "9090:9090" # Prometheus metrics
    command: [ "--config=/etc/otelcol-contrib/config.yaml" ]
    user: 0:0
    privileged: true
    volumes:
      - ./otel-configs/otelcol-config.yaml:/etc/otelcol-contrib/config.yaml
    networks:
      - otel-demo
    depends_on:
       - zookeeper
       - kafka
       - proemetheus

networks:
  otel-demo:
    driver: bridge

volumes:  
  demo-postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local